name: CI - Quality and Test Suite

on:
  push:
    branches: [main]
    # Exclude changes to documentation and other non-code files to conserve resources.
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/ci.yml"
  # Run on pull requests targeting the main branch.
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/ci.yml"

env:
  PYTHONFAULTHANDLER: 1
  PYTHONUNBUFFERED: 1
  PYTHONHASHSEED: random

jobs:
  cache-deps:
    name: Cache Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-py-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py-uv-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install --system -e ".[dev]"

  lint:
    name: Lint, Type Check & Pre-commit
    runs-on: ubuntu-latest
    needs: cache-deps
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-py-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py-uv-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install --system -e ".[dev]"

      - name: Lint with ruff
        run: ruff check src tests

      - name: Format check with black
        run: black --check src tests

      - name: Type check with mypy
        run: mypy src

      - name: Run pre-commit
        run: pre-commit run --all-files

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: cache-deps
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-py-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py-uv-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install --system -e ".[dev]"

      - name: Run tests
        run: |
          pytest \
            --cov=src/metagenomicsOS \
            --cov-report=xml \
            --cov-report=term-missing \
            --maxfail=5 \
            --tb=short \
            -v

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: your-dockerhub-username/metagenomics-os:latest
